kind: ConfigMap
apiVersion: v1
metadata:
  name: kong-declarative
data:
  kong.yml: |
    _format_version: "3.0"
    _transform: true
    services:
    - name: example-service
      url: http://httpbin.org/
      tags:
      - example
      routes:
      - name: example-route
        paths:
        - /
    plugins:
    - name: prometheus
      service: example-service
      config:
        latency_metrics: true
        status_code_metrics: true
        bandwidth_metrics: true
---
apiVersion: v1
kind: Pod
metadata:
  name: kong-db
spec:
  containers:
  - name: plane
    env:
    - name: POSTGRES_USER
      value: kong
    - name: POSTGRES_PASSWORD
      value: kong
    - name: POSTGRES_DB
      value: kong
    image: docker.io/library/postgres:11
    ports:
    - containerPort: 5432
      hostPort: 5432
    volumeMounts:
    - mountPath: /var/lib/postgresql/data
      name: plane-db-pvc
  volumes:
  - name: plane-db-pvc
    persistentVolumeClaim:
      claimName: plane-db
---
apiVersion: v1
kind: Pod
metadata:
  name: kong-control
spec:
  initContainers:
  - name: init-control
    image: docker.io/cintroll/kong-lab:main
    command: 
    - "sh"
    - "-c"
    - |
      cd /kong/cert \
      && kong hybrid gen_cert || true \
      && waitport $KONG_PG_HOST:5432 \
      && for i in {1..5}; do kong migrations bootstrap --vv && break || sleep 15; done
    volumeMounts:
      - name: kong-cert-pvc
        mountPath: /kong/cert
    env:
    - name: KONG_DATABASE
      value: "postgres"
    - name: KONG_PG_HOST
      value: "kong-db"
    - name: KONG_PG_PASSWORD
      value: "kong"
  containers:
  - name: plane
    image: docker.io/cintroll/kong-lab:main
    ports:
    - containerPort: 8001
      protocol: TCP
    - containerPort: 8005
      protocol: TCP
    - containerPort: 8006
      protocol: TCP
    env: 
    - name: KONG_ROLE
      value: control_plane
    - name: KONG_CLUSTER_CERT
      value: /kong/cert/cluster.crt
    - name: KONG_CLUSTER_CERT_KEY 
      value: /kong/cert/cluster.key
    - name: KONGPROXY_ACCESS_LOG
      value: /dev/stdout
    - name: KONG_ADMIN_ACCESS_LOG
      value: /dev/stdout
    - name: KONG_PROXY_ERROR_LOG
      value: /dev/stderr
    - name: KONG_ADMIN_ERROR_LOG
      value: /dev/stderr
    - name: KONG_DATABASE
      value: postgres
    - name: KONG_PG_HOST
      value: kong-db
    - name: KONG_PG_PASSWORD
      value: kong
    - name: KONG_ADMIN_LISTEN
      value: 0.0.0.0:8001
    volumeMounts:
      - name: kong-cert-pvc
        mountPath: /kong/cert
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_NET_RAW
        - CAP_AUDIT_WRITE
      privileged: false
      readOnlyRootFilesystem: false
  restartPolicy: Never
  volumes:
  - name: kong-cert-pvc
    persistentVolumeClaim:
      claimName: kong-cert
---
apiVersion: v1
kind: Pod
metadata:
  name: kong-data
spec:
  initContainers:
  - name: init-wait
    image: docker.io/cintroll/kong-lab:main
    command: ["sh", "-c", "waitport kong-control:8001 && deck sync -s /etc/kong/kong.yml"]
    env: 
      - name: DECK_KONG_ADDR 
        value: "http://kong-control:8001"
    volumeMounts:
      - name: kong-declarative-pvc
        mountPath: /etc/kong
  containers:
  - name: plane
    image: docker.io/cintroll/kong-lab:main
    ports:
    - containerPort: 8000
      protocol: TCP
    - containerPort: 8100
      protocol: TCP
    env: 
    - name: KONG_ROLE
      value: "data_plane"
    - name: KONG_CLUSTER_CERT
      value: "/kong/cert/cluster.crt"
    - name: KONG_CLUSTER_CERT_KEY
      value: "/kong/cert/cluster.key"
    - name: KONGPROXY_ACCESS_LOG
      value: "/dev/stdout"
    - name: KONG_ADMIN_ACCESS_LOG
      value: "/dev/stdout"
    - name: KONG_PROXY_ERROR_LOG
      value: "/dev/stderr"
    - name: KONG_ADMIN_ERROR_LOG
      value: "/dev/stderr"
    - name: KONG_DATABASE
      value: "off"
    - name: KONG_CLUSTER_CONTROL_PLANE
      value: "kong-control:8005"
    - name: KONG_CLUSTER_TELEMETRY_ENDPOINT
      value: "kong-control:8006"
    - name: KONG_PROXY_LISTEN
      value: "0.0.0.0:8000"
    - name: KONG_STATUS_LISTEN
      value: "0.0.0.0:8100"
    volumeMounts:
      - name: kong-cert-pvc
        mountPath: /kong/cert
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_NET_RAW
        - CAP_AUDIT_WRITE
      privileged: false
      readOnlyRootFilesystem: false
  restartPolicy: Never
  volumes:
  - name: kong-cert-pvc
    persistentVolumeClaim:
      claimName: kong-cert
  - name: kong-declarative-pvc
    configMap:
      name: kong-declarative
---
apiVersion: v1
kind: Pod
metadata:
  name: kong-konga
spec:
  initContainers:
  - name: wait-db-migue
    image: docker.io/cintroll/kong-lab:main
    command: ["sh", "-c", "waitport kong-db:5432"]
  - name: init-db
    image: docker.io/pantsel/konga
    command: ["sh", "/app/start.sh","-c", "prepare", "-a", "postgres", "-u", "postgresql://kong:kong@kong-db:5432/konga"]
  containers:
  - name: plane
    image: docker.io/pantsel/konga
    ports:
    - containerPort: 1337
      protocol: TCP
    env: 
    - name: KONGA_DB_HOST
      value: kong-db
    - name: KONG_PG_PASSWORD
      value: kong
    - name: KONGA_DB_USERNAME
      value: kong
    - name: KONGA_DB_NAME
      value: "konga"
    - name: NODE_ENV
      value: "development"
    - name: TOKEN_SECRET
      value: "8c0405244e6f39ec1e21e0d8044520f6a32904a9c870c278a0a20686729583f7"
    volumeMounts:
      - name: kong-cert-pvc
        mountPath: /kong/cert
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_NET_RAW
        - CAP_AUDIT_WRITE
      privileged: false
      readOnlyRootFilesystem: false
  restartPolicy: Never
  volumes:
  - name: kong-cert-pvc
    persistentVolumeClaim:
      claimName: kong-cert
  - name: kong-declarative-pvc
    configMap:
      name: kong-declarative
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: prom-config
data:
  prometheus.yml: |
    # Global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. 
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. 
      scrape_timeout: 15s  # scrape_timeout is set to the global default (10s).
    # A scrape configuration containing exactly one endpoint to scrape:# Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
        static_configs:
        - targets: ['localhost:9090']

      - job_name: 'kong'
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
        static_configs:
        - targets: ['kong-data:8100']
---        
apiVersion: v1
kind: Pod
metadata:
  name: kong-prometheus
spec:
  containers:
  - name: prom
    image: docker.io/prom/prometheus
    ports:
    - containerPort: 9090
      protocol: TCP
    volumeMounts:
      - name: prom-config-pvc
        mountPath: /etc/prometheus
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_NET_RAW
        - CAP_AUDIT_WRITE
      privileged: false
      readOnlyRootFilesystem: false
  restartPolicy: Never
  volumes:
  - name: prom-config-pvc
    configMap:
      name: prom-config
---        
apiVersion: v1
kind: Pod
metadata:
  name: kong-grafana
spec:
  containers:
  - name: prom
    image: docker.io/grafana/grafana
    ports:
    - containerPort: 3000
      protocol: TCP
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_NET_RAW
        - CAP_AUDIT_WRITE
      privileged: false
      readOnlyRootFilesystem: false
  restartPolicy: Never